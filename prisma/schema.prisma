datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?
  bio           String?
  password      String?

  createdAt DateTime  @default(now())
  updatedAt DateTime?

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
}

model Post {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  title      String
  content    Json?
  coverImage String?
  likeId     String[] @default([]) @db.ObjectId

  save Boolean? @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  postId  String  @db.ObjectId
  userId  String  @db.ObjectId
  content String?

  likeId String[] @default([]) @db.ObjectId

  created_at DateTime  @default(now())
  updated_at DateTime?

  reply_to_id String?   @db.ObjectId
  reply_to    Comment?  @relation("Reply_to", fields: [reply_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[] @relation("Reply_to")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
